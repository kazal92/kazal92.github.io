<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jun_IT</title>
    <link>https://kazal92.github.io/post/</link>
    <description>Recent content in Posts on Jun_IT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 04 Apr 2022 07:59:37 +0900</lastBuildDate><atom:link href="https://kazal92.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARP</title>
      <link>https://kazal92.github.io/arp/</link>
      <pubDate>Mon, 04 Apr 2022 07:59:37 +0900</pubDate>
      
      <guid>https://kazal92.github.io/arp/</guid>
      <description>누구냐고 물을 IP를 요청하는 브로드캐스트 MAC에 대한 ARP 요청 생성   ARP를 사용하여 누가 대상 IP를 가지고 있는지 확인 목적지 MAC을 브로드캐스트 MAC으로 설정  testetestestsettet haha  broadcast = scapy.Ether(dst=&amp;ldquo;ff:ff:ff:ff:ff:ff&amp;rdquo;) broadcast.show() # 확인
[https://www.guru99.com/linux-commands-cheat-sheet.html#2](https://www.guru99.com/linux-commands-cheat-sheet.html#2)   [Linux Command Cheat Sheet
In this Linux/Unix command line cheat sheet, you will learn: Basic Linux commands File Permission commands Environment Variables command User management commands of linux Networking command Process co</description>
    </item>
    
    <item>
      <title>ADB 사용법</title>
      <link>https://kazal92.github.io/android/adb-%EC%82%AC%EC%9A%A9%EB%B2%95/</link>
      <pubDate>Fri, 01 Apr 2022 08:43:09 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/adb-%EC%82%AC%EC%9A%A9%EB%B2%95/</guid>
      <description>1. ADB ADB 사용하기
https://forum.xda-developers.com/t/tool-minimal-adb-and-fastboot-2-9-18.2317790/
adb shell
adb devices  옵션
-e : 에뮬레이터
-d : USB 장치
-s : adb -s &amp;lt;장치명&amp;gt; &amp;lt;명령어&amp;gt;
 설치치된 패키지 찾기
&amp;gt;adb shell pm list packages | find &amp;#34;&amp;lt;패키지 이름이나 키워드&amp;gt;&amp;#34; apk의 정확한 패키지 이름 확인 후, apk 설치 위치를 확인합니다.
&amp;gt;adb shell dumpsys package &amp;lt;패키지 이름&amp;gt; | find &amp;#34;path&amp;#34; adb 기본 명령어(?) adb devices adb connect 127.0.0.1:62001 adb shell 로그 분석 adb logcat : 안드로이드 장치에서 발생하는 로그메시지 출력  adb logcat --pid=&amp;lt;pid&amp;gt; : 특정 프로세스 로그만 출력 프로세스 목록 확인 adb jdwp  // 해당 어플 실행전 adb jdwp 결과값과 실행후 결과값을 비교하여 추가된 PID로 분석 어플리케이션 제어 **// 어플리케이션 설치** adb install &amp;lt;apk_파일&amp;gt;  **// 동일한 어플리케이션 설치되어있을경우 기존데이터 삭제 없이 설치** adb -r install &amp;lt;apk_파일&amp;gt; | grep &amp;lt;설치된 어플리케이션&amp;gt;  **//설치된 어플리케이션 패키지 목록** adb shell pm list packages -f  **// 어플리케이션 삭제** adb uninstall &amp;lt;설치된패키지명&amp;gt; 파일제어 **// 에뮬레이터/장치 → PC로 파일 복사** adb pull &amp;lt;장치 경로&amp;gt; &amp;lt;pc저장 위치&amp;gt;  **// PC -&amp;gt; 에뮬레이터/장치로 파일 복사** adb push &amp;lt;pc파일위치&amp;gt; &amp;lt;장치저장 위치&amp;gt; 포트와 네트워킹 **// 로컬 포트를 안드로이드 장치의 특정 포트와 소켓 통신** adb forward &amp;lt;로컬&amp;gt; &amp;lt;원격지&amp;gt; adb forwoard tcp:7777 tcp:8888  **// 디버깅** adb forwoard tcp:7777 jdwp:1824 jdb -sourcepath &amp;lt;경로&amp;gt; -connect 스크립팅 **// 장치 시리얼 번호 출력** adb get-serialno  **// 장치 상태 문자열로 출력** adb get-state  **// 장치 구동시 명령어 실행** adb wait-for-device &amp;lt;명령어&amp;gt; 서버 **// ADB 서버 프로세스 동작여부 확인후 결과 표시, 동작중이지 않으면 서버 구동시킴** adb start-server  **// 서버종료** adb kill-server 버그 보고서 adb bugreport </description>
    </item>
    
    <item>
      <title>Android 취약점</title>
      <link>https://kazal92.github.io/android/android_%EC%B7%A8%EC%95%BD%EC%A0%90/</link>
      <pubDate>Fri, 01 Apr 2022 07:00:11 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/android_%EC%B7%A8%EC%95%BD%EC%A0%90/</guid>
      <description>Android 취약점  android App 기능 혹은 잘못된 설정에 의한 취약점  Android 취약점 관련 진단 항목 (금취분평 기준)
 화면 강제실행에 의한 인증단계 우회 인증 및 인가 관련 항목 정보 노출 관련 항목  Android 취약점 발견 위치
 Activity Broadcase Receiver Content Provider   Activity 컴포넌트 취약점 Android Activity는 화면에 표시되는 UI 구성을 위해 가장 기본이 되는 요소이며, 각각 독립적으로 동작하기 때문에 보안적으로 취약하게 선언되어 있을 경우, 원하는 activity를 강제로 호출 가능한 취약점</description>
    </item>
    
    <item>
      <title>Android App 데이터 변조</title>
      <link>https://kazal92.github.io/android/data-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EC%A1%B0/</link>
      <pubDate>Fri, 01 Apr 2022 06:19:08 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/data-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EC%A1%B0/</guid>
      <description>App 데이터 변조 진단  App이 서버와 통신하는 데이터 혹은 앱 내부에서 전달되는 함수 인자, 반환값 데이터 등을 변조하여 App 실행 흐름을 바꾸거나, 개발자가 의도하지 않은 동작을 유발할 수 있음 인증 우회나 인젝션 등 App 서비스에 대한 공격이 데이터 변조로 주로 이루어짐  데이터 변조에 관련된 진단 항목(금취분평 기준)
 데이터를 변조하는 모든 진단 항목 (SQL 인젝션 , 인증, 인가와 관련된 취약점 등)  데이터 변조 위치
 네트워크 통신 데이터 변조 : TCP 통신, HTTP 통신 메모리 내 데이터 변조 : 함수 인자, 반환값, 메모리 영역 데이터 변조    네트워크 통신 구간 데이터 변조   App 서버와 통신을 하는 과정에서 통신 데이터를 분석하고, 데이터를 변조함으로써 인증 우회, 파라미터 변조 등 다양한 공격을 수행 할 수 있음  네트워크 통신  TCP 통신</description>
    </item>
    
    <item>
      <title>Android App 정보노출 진단</title>
      <link>https://kazal92.github.io/android/information_disclosure/</link>
      <pubDate>Fri, 01 Apr 2022 05:16:13 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/information_disclosure/</guid>
      <description>정보 노출 진단  App의 동작으로 인해 노출 되서는 안되는 정보들이 노출되는 취약점 App이 실행 중 사용자의 개인정보, 중요정보를 단말기에 저장할 경우, 단말기가 공격자에 의해 탈취 당하거나 악성 앱이 설치되어 단말기에 저장된 중요정보들이 노출될 수 있음 App 통신 패킷이나 실행 파일에서 서버의 중요정보들이 노출되어 2차 공격에 이용될 수 있음  정보 노출의 위험도
 서버의 중요 정보의 중요도에 따라 위험도는 높아질 수 있음 단말기 내에서 노출되는 개인정보, 중요정보 등은 실제 공격에서는 가정되어야 하는 조건(루팅, 잠금 설정 우회 등)이 많지만 무시할 수 없음  정보 노출관련된 진단 항목 (금취분평 기준)</description>
    </item>
    
    <item>
      <title>Android App 분석</title>
      <link>https://kazal92.github.io/android/app_analyze/</link>
      <pubDate>Fri, 01 Apr 2022 04:15:11 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/app_analyze/</guid>
      <description>APK 추출 백업 기능을 이용해서 추출 ASTRO 파일 관리자 설치
https://drive.google.com/file/d/1DWBTDjP1HQDAGszkn5fvNkzj0RP0xKnd/view?usp=sharing 앱 &amp;gt; 추출할 앱 선택(쭉) &amp;gt; 백업
$ adb shell $ cd /sdcard/backups/apps -&amp;gt; 백업된 앱 경로 및 파일명 확인  $ adb pull /sdcard/backups/apps/jakhar.aseem.diva.apk    
ARM 이란? CISC vs RISC Advanced RISC Machine의 약자 CPU TYPE  
ARM 모드 / Thumb 모드Í  ARM 과 x86 의 가장 큰 차이점은 Thumb 모드가 있다는 것 THUMB 모드는 32bit ARM에서 동작하는 16bit 기계어  ARM 모드 ←→ Thumb 모드 BLX / BX 등 X로 끝나는 분기문 명령으로 모드 전환</description>
    </item>
    
    <item>
      <title>smali code</title>
      <link>https://kazal92.github.io/android/smali_code/</link>
      <pubDate>Fri, 01 Apr 2022 03:06:10 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/smali_code/</guid>
      <description>타입 I – int J – long Z – Boolean D – double F – float S – short C – char V - void 메소드 종류 Static : this 인수가 암묵적으로 첫번째 인수로 전달되지 않으면, Static 메소드
Direct : vtable 개입 없이 직접 invoke 함 (ex. private method, constructor)
Virtual : 자식 클래스에서 override 될 수 있는 Virtual 메소드. 클래스 관련됨 vtable을 사용해 invoke 함
Register 간 데이터 이동 move move/from16 move-wide move-wide/from16 move-object move-object/from16 리턴 세팅 및 처리 move-result move-result-wide move-result-object return-void return return-wide return-object 예외 처리 throw move-exception 레지스터에 상수 대입 const/4 const 인스트럭션 패밀리</description>
    </item>
    
    <item>
      <title>Android 보안 솔루션</title>
      <link>https://kazal92.github.io/android/android-%EB%B3%B4%EC%95%88-%EC%86%94%EB%A3%A8%EC%85%98/</link>
      <pubDate>Wed, 30 Mar 2022 23:39:15 +0900</pubDate>
      
      <guid>https://kazal92.github.io/android/android-%EB%B3%B4%EC%95%88-%EC%86%94%EB%A3%A8%EC%85%98/</guid>
      <description>Android 보안 솔루션  루팅 탐지   공격자들의 App 분석 및 공격을 방해하기 위해 탐지 사용자들에게 해당 App이 루팅된 기기에서 실행될 경우 위험하다는 것을 경고하기 위해 탐지 (특히, 금융App)  루팅 탐지 원리 루팅이 되었을 때 나타나는 특징들을 확인하여 루팅을 탐지
 
루팅 탐지 방법  설치된 package 확인 루팅했을 때 설치되는 App이 존재하는지 확인하여 루팅 탐지 pm을 이용하여 확인   
파일 확인
 su binary, busybox 등 파일 확인</description>
    </item>
    
    <item>
      <title>Android 구조와 동작원리</title>
      <link>https://kazal92.github.io/android/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kazal92.github.io/android/</guid>
      <description>Architecture Linux Kernel 내용 추가~!!
Android Runtime  AOT(Ahead Of Time), JIT(Just In Time) 컴파일 최적화된 GC(Garbage Collector : 메모리 관리)  달빅 VM(Dalvick Virtual Machine)과 ART(Ahead Of Time)
 Andorid는 기본 언어를 JAVA를 사용하기 때문에 JVM 역할을 할 수 있는 VM 필요 안드로이드 구조에 최적화 시켜 만든 달빅 VM과 ART 가상머신이 dex 포맷의 바이트코드를 해석하여 안드로이드 어플리케이션을 실행하게 된다.   JIT(Just In Time)
어플리케이션 구동 시 실시간으로 자바코드로 변환하며, 자바코드 일정부분 RAM 상에 상주</description>
    </item>
    
  </channel>
</rss>
